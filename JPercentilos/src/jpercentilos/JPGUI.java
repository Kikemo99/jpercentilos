/*
 *  Copyright (C) 2011 Joaquín Ignacio Aramendía <samsagax@gmail.com>
 * 
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * JPGUI.java
 *
 * Created on 07/01/2011, 20:35:27
 */
package jpercentilos;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

/**
 *
 * @author Joaquín Ignacio Aramendía <samsagax@gmail.com>
 */
public class JPGUI extends javax.swing.JFrame {

    /** Creates new form JPGUI */
    public JPGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        calcPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        dateOfBirthField = new javax.swing.JFormattedTextField();
        ageField = new javax.swing.JTextField();
        ageComboBox = new javax.swing.JComboBox();
        heightField = new javax.swing.JTextField();
        heightComboBox = new javax.swing.JComboBox();
        weightField = new javax.swing.JTextField();
        weightComboBox = new javax.swing.JComboBox();
        HPField = new javax.swing.JTextField();
        HPComboBox = new javax.swing.JComboBox();
        sexComboBox = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        weightCentField = new javax.swing.JTextField();
        heightCentField = new javax.swing.JTextField();
        PCCentField = new javax.swing.JTextField();
        IMCCentField = new javax.swing.JTextField();
        javax.swing.JLabel jLabel7 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel8 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel9 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel10 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel6 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel12 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel13 = new javax.swing.JLabel();
        javax.swing.JLabel jLabel14 = new javax.swing.JLabel();
        weightPzField = new javax.swing.JTextField();
        heightPzField = new javax.swing.JTextField();
        PCPzField = new javax.swing.JTextField();
        IMCPzField = new javax.swing.JTextField();
        labelWeight = new javax.swing.JLabel();
        labelHeight = new javax.swing.JLabel();
        labelHP = new javax.swing.JLabel();
        labelIMC = new javax.swing.JLabel();
        IMCField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JPercentilos (beta)");

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del paciente"));

        jLabel1.setText("Fecha de nacimiento:");

        jLabel2.setText("Edad:");

        jLabel3.setText("Talla:");

        jLabel4.setText("Peso:");

        jLabel5.setText("Perímetro cefálico:");

        jLabel11.setText("Sexo:");

        dateOfBirthField.setColumns(10);
        dateOfBirthField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM))));
        dateOfBirthField.setText("10/10/1986");
        dateOfBirthField.setInputVerifier(verificador);

        ageField.setColumns(5);
        ageField.setInputVerifier(verificador);

        ageComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(días)", "(meses)", "(años)" }));

        heightField.setColumns(5);
        heightField.setInputVerifier(verificador);

        heightComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(m)", "(cm)" }));

        weightField.setColumns(5);
        weightField.setInputVerifier(verificador);

        weightComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(kg)", "(g)" }));

        HPField.setColumns(5);
        HPField.setInputVerifier(verificador);

        HPComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(cm)", "(mm)" }));

        sexComboBox.setModel(new DefaultComboBoxModel(Paciente.Sexo.values()));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(sexComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(HPField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(heightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(HPComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(weightComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ageComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(heightComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(dateOfBirthField))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateOfBirthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heightComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(weightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(HPField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(HPComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sexComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.setAction(new CalculateAction());
        jButton1.setText("Calcular");

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Percentilos"));

        weightCentField.setColumns(4);
        weightCentField.setEditable(false);
        weightCentField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        heightCentField.setColumns(4);
        heightCentField.setEditable(false);
        heightCentField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        PCCentField.setColumns(4);
        PCCentField.setEditable(false);
        PCCentField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        IMCCentField.setColumns(4);
        IMCCentField.setEditable(false);
        IMCCentField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel7.setText("Peso:");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel8.setText("Talla:");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel9.setText("PC:");

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel10.setText("IMC:");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel6.setText("Pz Peso:");

        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel12.setText("Pz Talla:");

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel13.setText("Pz PC:");

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel14.setText("Pz IMC:");

        weightPzField.setColumns(6);
        weightPzField.setEditable(false);
        weightPzField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        heightPzField.setColumns(6);
        heightPzField.setEditable(false);
        heightPzField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        PCPzField.setColumns(6);
        PCPzField.setEditable(false);
        PCPzField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        IMCPzField.setColumns(6);
        IMCPzField.setEditable(false);
        IMCPzField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        labelWeight.setText("jLabel16");

        labelHeight.setText("jLabel17");

        labelHP.setText("jLabel18");

        labelIMC.setText("jLabel19");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(weightCentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(heightCentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PCCentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IMCCentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(weightPzField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heightPzField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PCPzField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IMCPzField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelWeight)
                    .addComponent(labelHeight)
                    .addComponent(labelHP)
                    .addComponent(labelIMC))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(weightPzField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelWeight))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(heightPzField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelHeight))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PCPzField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelHP))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(IMCPzField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelIMC)))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(weightCentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(heightCentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PCCentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel13))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(IMCCentField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel14))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        IMCField.setColumns(6);
        IMCField.setEditable(false);

        jLabel15.setText("IMC:");

        javax.swing.GroupLayout calcPanelLayout = new javax.swing.GroupLayout(calcPanel);
        calcPanel.setLayout(calcPanelLayout);
        calcPanelLayout.setHorizontalGroup(
            calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calcPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(calcPanelLayout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IMCField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        calcPanelLayout.setVerticalGroup(
            calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(calcPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(calcPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel15)
                    .addComponent(IMCField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Calcular", calcPanel);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 366, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 439, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("tab2", jPanel2);

        fileMenu.setText("Archivo");

        jMenuItem2.setText("Salir");
        fileMenu.add(jMenuItem2);

        jMenuBar1.add(fileMenu);

        helpMenu.setText("Ayuda");

        jMenuItem1.setText("Acerca de...");
        helpMenu.add(jMenuItem1);

        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            // Set System L&F
            UIManager.setLookAndFeel(
                    UIManager.getSystemLookAndFeelClassName());
        } catch (UnsupportedLookAndFeelException e) {
            // handle exception
        } catch (ClassNotFoundException e) {
            // handle exception
        } catch (InstantiationException e) {
            // handle exception
        } catch (IllegalAccessException e) {
            // handle exception
        }
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new JPGUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox HPComboBox;
    private javax.swing.JTextField HPField;
    private javax.swing.JTextField IMCCentField;
    private javax.swing.JTextField IMCField;
    private javax.swing.JTextField IMCPzField;
    private javax.swing.JTextField PCCentField;
    private javax.swing.JTextField PCPzField;
    private javax.swing.JComboBox ageComboBox;
    private javax.swing.JTextField ageField;
    private javax.swing.JPanel calcPanel;
    private javax.swing.JFormattedTextField dateOfBirthField;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextField heightCentField;
    private javax.swing.JComboBox heightComboBox;
    private javax.swing.JTextField heightField;
    private javax.swing.JTextField heightPzField;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labelHP;
    private javax.swing.JLabel labelHeight;
    private javax.swing.JLabel labelIMC;
    private javax.swing.JLabel labelWeight;
    private javax.swing.JComboBox sexComboBox;
    private javax.swing.JTextField weightCentField;
    private javax.swing.JComboBox weightComboBox;
    private javax.swing.JTextField weightField;
    private javax.swing.JTextField weightPzField;
    // End of variables declaration//GEN-END:variables
    private DecimalFormat doubleFormat = initDoubleFormat();
    private DecimalFormat percentFormat = initPercentFormat();
    private Verifier verificador = new Verifier();

    private DecimalFormat initDoubleFormat() {
        DecimalFormat df = (DecimalFormat) DecimalFormat.getNumberInstance();
        df.setMaximumFractionDigits(3);
        df.setGroupingUsed(false);
        return df;
    }

    private DecimalFormat initPercentFormat() {
        DecimalFormat df = (DecimalFormat) DecimalFormat.getPercentInstance();
        return df;
    }

    /**
     * Lee el campo de edad, debe ser validado antes. Se delega el cálculo de la
     * fecha de nacimiento al validador. Devuelve -1 si ocurre algún error.
     * @return
     */
    int getAgeInDays() {
        int days;
        try {
            days = (int) StrictMath.rint(
                    doubleFormat.parse(
                    ageField.getText().replaceAll("\\.", ",")).doubleValue());
            double mult;
            switch (ageComboBox.getSelectedIndex()) {
                case 0:
                    mult = 1;
                    break;
                case 1:
                    mult = 30.4375;
                    break;
                case 2:
                    mult = 365.25;
                    break;
                default:
                    mult = 1;
            }
            days = (int) StrictMath.rint(mult * (double) days);
            return days;
        } catch (ParseException ex) {
            Logger.getLogger(JPGUI.class.getName()).log(Level.SEVERE, null, ex);
            return -1;
        }
    }

    /**
     * Devuelve el peso en Kg leyendo el campo de peso y convirtiendo de acuerdo
     * a la selección del ComboBox correspondiente. Debe ser validado antes.
     * Devuelve -1 si ocurre algún error.
     * @return
     */
    double getWeightInKg() {
        double kg;
        try {
            kg = doubleFormat.parse(
                    weightField.getText().replaceAll("\\.", ",")).doubleValue();
            double mult;
            switch (weightComboBox.getSelectedIndex()) {
                case 0:
                    mult = 1;
                    break;
                case 1:
                    mult = 10e-3;
                    break;
                default:
                    mult = 1;
            }
            kg = mult * kg;
            return kg;
        } catch (ParseException ex) {
            Logger.getLogger(JPGUI.class.getName()).log(Level.SEVERE, null, ex);
            return -1;
        }
    }

    /**
     * Devuelve la talla en Cm leyendo el campo de peso y convirtiendo de acuerdo
     * a la selección del ComboBox correspondiente. Debe ser validado antes.
     * Devuelve -1 si ocurre algún error
     * @return
     */
    double getHeightInCm() {
        double cm;
        try {
            cm = doubleFormat.parse(
                    heightField.getText().replaceAll("\\.", ",")).doubleValue();
            double mult;
            switch (heightComboBox.getSelectedIndex()) {
                case 0:
                    mult = 100;
                    break;
                case 1:
                    mult = 1;
                    break;
                default:
                    mult = 1;
            }
            cm = mult * cm;
            return cm;
        } catch (ParseException ex) {
            Logger.getLogger(JPGUI.class.getName()).log(Level.SEVERE, null, ex);
            return -1;
        }
    }

    /**
     * Devuelve el perímetro cefálico en mm leyendo el campo de peso y 
     * convirtiendo según la opción en el ComboBox correspondiente. Debe ser 
     * validado antes. Devuelve un -1 como indicador de error.
     * @return
     */
    double getPcInCm() {
        double cm;
        try {
            cm = doubleFormat.parse(
                    HPField.getText().replaceAll("\\.", ",")).doubleValue();
            double mult;
            switch (HPComboBox.getSelectedIndex()) {
                case 0:
                    mult = 1;
                    break;
                case 1:
                    mult = 10;
                    break;
                default:
                    mult = 1;
            }
            cm = mult * cm;
            return cm;
        } catch (ParseException ex) {
            Logger.getLogger(JPGUI.class.getName()).log(Level.SEVERE, null, ex);
            return -1;
        }
    }

    /**
     * Validador de datos de entrada y formato.
     */
    private class Verifier extends InputVerifier implements FocusListener {

        @Override
        public boolean shouldYieldFocus(JComponent input) {
            boolean checked = verify(input);
            showPretty(input);
            if (!checked) {
                Toolkit.getDefaultToolkit().beep();
                focusGained(new FocusEvent(input, FocusEvent.FOCUS_GAINED));
            }
            return checked;
        }

        @Override
        public boolean verify(JComponent input) {
            if (input instanceof JTextField) {
                JTextField field = (JTextField) input;
                return checkField(field, false);
            }
            return false; //No debería pasar
        }

        private void showPretty(JComponent input) {
            if (input instanceof JTextField) {
                JTextField field = (JTextField) input;
                checkField(field, true);
            }
        }

        private boolean checkField(JTextField field, boolean setIt) {
            if (field.equals(ageField)) {
                return checkAgeField(field, setIt);
            } else if (field.equals(heightField)) {
                return checkHeightField(field, setIt);
            } else if (field.equals(weightField)) {
                return checkWeightField(field, setIt);
            } else if (field.equals(HPField)) {
                return checkHPField(field, setIt);
            } else if (field.equals(dateOfBirthField)) {
                return checkDateOfBirthField(field, setIt);
            } else {
                return false; // No debería pasar.
            }
//            long num = DEFAULT_VALUE;
//            boolean valid = true;
//            try {
//                num = intFormat.parse(field.getText()).longValue();
//            } catch (ParseException pe) {
//                pe.printStackTrace();
//                valid = false;
//            }
//            if ((num <= MIN_VALUE) || (num >= MAX_VALUE)) {
//                valid = false;
//                if (setIt) {
//                    if (num <= MIN_VALUE) {
//                        num = MIN_VALUE;
//                    } else if (num >= MAX_VALUE) {
//                        num = MAX_VALUE;
//                    }
//                }
//            }
//            if (setIt) {
//                field.setText(doubleFormat.format(num));
//            }
//            return valid;
        }

        /**
         * Verifica si el campo de texto contiene un número
         * @param field
         * @return
         */
        private boolean checkForDouble(JTextField field) {
            try {
                doubleFormat.parse(field.getText().replaceAll("\\.", ","));
                return true;
            } catch (ParseException pe) {
                return false;
            }
        }

        /**
         * Si el componente seleccionado es un campo de texto, selecciona todo
         * su contenido
         * @param e
         */
        public void focusGained(FocusEvent e) {
            if (e.getComponent() instanceof JTextField) {
                JTextField field = (JTextField) e.getComponent();
                field.selectAll();
            }
        }

        public void focusLost(FocusEvent e) {
        }

        /**
         * Checkea el campo de edad. Debe estar entre 0 y 1856 días (60 meses, 
         * 5 años).
         * @param field
         * @param setIt
         * @return
         */
        private boolean checkAgeField(JTextField field, boolean setIt) {
            boolean valid = false;
            final long MIN_DAYS = 0;
            final long MAX_DAYS = 1856;
            long value = MIN_DAYS;
            if (checkForDouble(field)) {
                value = getAgeInDays();
                if ((value >= MIN_DAYS) && (value <= MAX_DAYS)) {
                    valid = true;
                } else {
                    valid = false;
                }
            }
            if (setIt) {
                if (!valid) {
                    if (value > MAX_DAYS) {
                        value = MAX_DAYS;
                    } else {
                        value = MIN_DAYS;
                    }
                } else {
                    try {
                        value = doubleFormat.parse(field.getText()).intValue();
                    } catch (ParseException ex) {
                        Logger.getLogger(JPGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                field.setText(doubleFormat.format(value));
            }
            return valid;
        }

        /**
         * Checkea el campo de Altura, el valore debe ser número positivo.
         * @param field
         * @param setIt
         * @return
         */
        private boolean checkHeightField(JTextField field, boolean setIt) {
            boolean valid = false;
            final int MIN = 0;
            double value = MIN;
            if (checkForDouble(field)) {
                value = getHeightInCm();
                if ((value >= MIN)) {
                    valid = true;
                    try {
                        value = doubleFormat.parse(field.getText()).intValue();
                    } catch (ParseException ex) {
                        Logger.getLogger(JPGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    valid = false;
                }
            }
            if (setIt) {
                if (!valid) {
                    value = MIN;
                } else {
                    try {
                        value = doubleFormat.parse(field.getText()).doubleValue();
                    } catch (ParseException ex) {
                        Logger.getLogger(JPGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                field.setText(doubleFormat.format(value));
            }
            return valid;
        }

        /**
         * Checkea el campo de Peso, el valor debe ser un número positivo.
         * @param field
         * @param setIt
         * @return
         */
        private boolean checkWeightField(JTextField field, boolean setIt) {
            boolean valid = false;
            final int MIN = 0;
            double value = MIN;
            if (checkForDouble(field)) {
                value = getWeightInKg();
                if ((value >= MIN)) {
                    valid = true;
                } else {
                    valid = false;
                }
            }
            if (setIt) {
                if (!valid) {
                    value = MIN;
                } else {
                    try {
                        value = doubleFormat.parse(field.getText()).doubleValue();
                    } catch (ParseException ex) {
                        Logger.getLogger(JPGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                field.setText(doubleFormat.format(value));
            }
            return valid;
        }

        /**
         * Checkea el campo de Peso, el valor debe ser un número positivo.
         * @param field
         * @param setIt
         * @return
         */
        private boolean checkHPField(JTextField field, boolean setIt) {
            boolean valid = false;
            final int MIN = 0;
            double value = MIN;
            if (checkForDouble(field)) {
                value = getPcInCm();
                if ((value >= MIN)) {
                    valid = true;
                } else {
                    valid = false;
                }
            }
            if (setIt) {
                if (!valid) {
                    value = MIN;
                } else {
                    try {
                        value = doubleFormat.parse(field.getText()).doubleValue();
                    } catch (ParseException ex) {
                        Logger.getLogger(JPGUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                field.setText(doubleFormat.format(value));
            }
            return valid;
        }

        /**
         * Chechea el campo de Fecha de nacimiento. Debe ser una fecha válida y
         * en días ser menor a 5 años. Cambia el campo de Edad para que
         * concuerde.
         * @param field
         * @param setIt
         * @return
         */
        private boolean checkDateOfBirthField(JTextField field, boolean setIt) {
            boolean valid = false;
            DateFormat df = DateFormat.getDateInstance(DateFormat.MEDIUM);
            long days = 0;
            Date now = Calendar.getInstance().getTime();
            Date birth = now;
            try {
                birth = df.parse(field.getText());
                days = daysDifference(birth, now);
                if ((birth.before(now) || birth.equals(now)) && (days <= 1856)) {
                    valid = true;
                }
            } catch (Exception e) {
                valid = false;
                days = 0;
            }
            if (setIt) {
                if (!valid) {
                    birth = now;
                    days = 0;
                    field.setText(df.format(birth));
                } else {
                }
                field.setText(df.format(birth));
                ageField.setText(doubleFormat.format(days));
                ageComboBox.setSelectedIndex(0);
            }
            return valid;
        }

        private long daysDifference(Date date, Date anotherDate) {
            long dif = date.getTime() - anotherDate.getTime();
            if (Long.signum(dif) == -1) {
                dif = -dif;
            }
            long días = dif / (1000 * 60 * 60 * 24);
            return días;
        }
    }

    /**
     * Acción que calcula los percentilos. Crea un objeto Paciente con los datos
     * asignados. Imprime en el GUI los datos obtenidos
     */
    private class CalculateAction extends AbstractAction {

        /**
         * Lee los datos correspondientes. Imprime los percentilos.
         * @param e
         */
        public void actionPerformed(ActionEvent e) {
//            System.out.println("Calculando..."); //Línea dummy, debería comentarse
            // Llenado de datos
            Paciente.Sexo sexo = (Paciente.Sexo) sexComboBox.getSelectedItem();
            int age = getAgeInDays();
            double weight = getWeightInKg();
            double height = getHeightInCm();
            double pc = getPcInCm();
            double IMC;
            try {
                IMC = Paciente.getIMC(height / 100, weight);
                IMCField.setText(doubleFormat.format(IMC));
            } catch (Paciente.DataNotFoundException dataNotFoundException) {
                IMC = -1;
                IMCField.setText("--");
            }
            try {
                double[] perWeight = Paciente.getWeightToAgeCentileAndPz(sexo, age, weight);
                weightCentField.setText(percentFormat.format(perWeight[0]));
                weightPzField.setText(doubleFormat.format(perWeight[1]));
            } catch (Paciente.DataNotFoundException dataNotFoundException) {
                weightCentField.setText("--");
                weightPzField.setText("--");
            }
            try {
                double[] perHeight = Paciente.getHeightToAgeCentileAndPz(sexo, age, height);
                heightCentField.setText(percentFormat.format(perHeight[0]));
                heightPzField.setText(doubleFormat.format(perHeight[1]));
            } catch (Paciente.DataNotFoundException dataNotFoundException) {
                heightCentField.setText("--");
                heightPzField.setText("--");
            }
            try {
                double[] perPc = Paciente.getHpToAgeCentileAndPz(sexo, age, pc);
                PCCentField.setText(percentFormat.format(perPc[0]));
                PCPzField.setText(doubleFormat.format(perPc[1]));
            } catch (Paciente.DataNotFoundException dataNotFoundException) {
                PCCentField.setText("--");
                PCPzField.setText("--");
            }
            try {
                double[] perImc = Paciente.getIMCToAgeCentileAndPz(sexo, age, IMC);
                IMCCentField.setText(percentFormat.format(perImc[0]));
                IMCPzField.setText(doubleFormat.format(perImc[1]));
            } catch (Paciente.DataNotFoundException dataNotFoundException) {
                IMCCentField.setText("--");
                IMCPzField.setText("--");
            }
        }

        private void setLabel(double pz, JLabel label) {
            if (pz <= -3) {
            } else if (pz > -3 && pz <= -2) {
            } else if (pz > -2 && pz < 2) {
            } else if (pz >= 2 && pz < 3) {
            } else if (pz >= 3) {
            }
        }
    }
}
